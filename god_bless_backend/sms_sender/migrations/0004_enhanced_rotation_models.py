# Generated by Django 4.2.25 on 2025-10-08 10:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('smtps', '0002_alter_smtpmanager_options_smtpmanager_failed_emails_and_more'),
        ('proxy_server', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sms_sender', '0003_smscampaign_custom_macros_smsmessage_recipient_data'),
    ]

    operations = [
        migrations.CreateModel(
            name='CampaignDeliverySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use_proxy_rotation', models.BooleanField(default=True)),
                ('proxy_rotation_strategy', models.CharField(choices=[('round_robin', 'Round Robin'), ('random', 'Random'), ('least_used', 'Least Used'), ('best_performance', 'Best Performance'), ('smart_adaptive', 'Smart Adaptive')], default='round_robin', max_length=20)),
                ('use_smtp_rotation', models.BooleanField(default=True)),
                ('smtp_rotation_strategy', models.CharField(choices=[('round_robin', 'Round Robin'), ('random', 'Random'), ('least_used', 'Least Used'), ('best_performance', 'Best Performance'), ('smart_adaptive', 'Smart Adaptive')], default='round_robin', max_length=20)),
                ('custom_delay_enabled', models.BooleanField(default=False)),
                ('custom_delay_min', models.IntegerField(default=1, help_text='Minimum delay in seconds')),
                ('custom_delay_max', models.IntegerField(default=5, help_text='Maximum delay in seconds')),
                ('custom_random_seed', models.IntegerField(blank=True, help_text='Random seed for reproducible delays', null=True)),
                ('adaptive_optimization_enabled', models.BooleanField(default=False)),
                ('carrier_optimization_enabled', models.BooleanField(default=False)),
                ('timezone_optimization_enabled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Campaign Delivery Settings',
                'verbose_name_plural': 'Campaign Delivery Settings',
            },
        ),
        migrations.CreateModel(
            name='CampaignTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Template name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Template description')),
                ('category', models.CharField(choices=[('marketing', 'Marketing'), ('alerts', 'Alerts'), ('notifications', 'Notifications'), ('custom', 'Custom')], default='custom', max_length=20)),
                ('settings', models.JSONField(default=dict, help_text='Template configuration settings')),
                ('usage_count', models.IntegerField(default=0, help_text='Number of times this template has been used')),
                ('average_success_rate', models.FloatField(blank=True, help_text='Average success rate of campaigns using this template', null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Allow sharing between users')),
                ('is_system_template', models.BooleanField(default=False, help_text='System-provided template')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-usage_count', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CarrierPerformanceLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('carrier', models.CharField(help_text='Carrier name', max_length=50)),
                ('success_rate', models.FloatField(default=0.0, help_text='Success rate percentage (0-100)')),
                ('average_delivery_time', models.FloatField(blank=True, help_text='Average delivery time in seconds', null=True)),
                ('messages_sent', models.IntegerField(default=0)),
                ('successful_deliveries', models.IntegerField(default=0)),
                ('failed_deliveries', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='RetryAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.IntegerField(help_text='Retry attempt number (1, 2, 3, etc.)')),
                ('error_type', models.CharField(help_text='Type of error that caused the retry', max_length=50)),
                ('error_message', models.TextField(help_text='Detailed error message')),
                ('retry_delay', models.IntegerField(help_text='Delay before retry in seconds')),
                ('scheduled_retry_time', models.DateTimeField(help_text='When the retry is scheduled')),
                ('completed', models.BooleanField(default=False)),
                ('success', models.BooleanField(default=False)),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['attempt_number'],
            },
        ),
        migrations.CreateModel(
            name='ServerUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('server_type', models.CharField(choices=[('proxy', 'Proxy'), ('smtp', 'SMTP')], max_length=10)),
                ('server_id', models.IntegerField(help_text='ID of the proxy or SMTP server')),
                ('messages_processed', models.IntegerField(default=0)),
                ('successful_messages', models.IntegerField(default=0)),
                ('failed_messages', models.IntegerField(default=0)),
                ('average_response_time', models.FloatField(blank=True, help_text='Average response time in seconds', null=True)),
                ('total_processing_time', models.FloatField(blank=True, help_text='Total processing time in seconds', null=True)),
                ('first_used', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='smsmessage',
            name='proxy_used',
        ),
        migrations.AddField(
            model_name='smsmessage',
            name='delivery_delay_applied',
            field=models.FloatField(blank=True, help_text='Delay applied before sending (seconds)', null=True),
        ),
        migrations.AddField(
            model_name='smsmessage',
            name='proxy_response_time',
            field=models.FloatField(blank=True, help_text='Proxy response time in seconds', null=True),
        ),
        migrations.AddField(
            model_name='smsmessage',
            name='proxy_server',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sms_messages', to='proxy_server.proxyserver'),
        ),
        migrations.AddField(
            model_name='smsmessage',
            name='proxy_used_legacy',
            field=models.CharField(blank=True, help_text='Legacy proxy field', max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='smsmessage',
            name='smtp_response_time',
            field=models.FloatField(blank=True, help_text='SMTP response time in seconds', null=True),
        ),
        migrations.AddField(
            model_name='smsmessage',
            name='smtp_server_legacy',
            field=models.CharField(blank=True, help_text='Legacy SMTP server field', max_length=200, null=True),
        ),
        migrations.AddField(
            model_name='smsmessage',
            name='total_processing_time',
            field=models.FloatField(blank=True, help_text='Total processing time in seconds', null=True),
        ),
        migrations.AlterField(
            model_name='smsmessage',
            name='smtp_server',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sms_messages', to='smtps.smtpmanager'),
        ),
        migrations.AddIndex(
            model_name='smsmessage',
            index=models.Index(fields=['proxy_server'], name='sms_sender__proxy_s_1dd05d_idx'),
        ),
        migrations.AddIndex(
            model_name='smsmessage',
            index=models.Index(fields=['smtp_server'], name='sms_sender__smtp_se_01f9d6_idx'),
        ),
        migrations.AddField(
            model_name='serverusagelog',
            name='campaign',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='server_usage_logs', to='sms_sender.smscampaign'),
        ),
        migrations.AddField(
            model_name='retryattempt',
            name='message',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='retry_attempts', to='sms_sender.smsmessage'),
        ),
        migrations.AddField(
            model_name='retryattempt',
            name='retry_proxy_server',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='proxy_server.proxyserver'),
        ),
        migrations.AddField(
            model_name='retryattempt',
            name='retry_smtp_server',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='smtps.smtpmanager'),
        ),
        migrations.AddField(
            model_name='carrierperformancelog',
            name='proxy_server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carrier_performance_logs', to='proxy_server.proxyserver'),
        ),
        migrations.AddField(
            model_name='carrierperformancelog',
            name='smtp_server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='carrier_performance_logs', to='smtps.smtpmanager'),
        ),
        migrations.AddField(
            model_name='campaigntemplate',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaign_templates', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='campaigndeliverysettings',
            name='campaign',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_settings', to='sms_sender.smscampaign'),
        ),
        migrations.AddIndex(
            model_name='serverusagelog',
            index=models.Index(fields=['campaign', 'server_type'], name='sms_sender__campaig_3a1899_idx'),
        ),
        migrations.AddIndex(
            model_name='serverusagelog',
            index=models.Index(fields=['server_type', 'server_id'], name='sms_sender__server__cd94aa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='serverusagelog',
            unique_together={('campaign', 'server_type', 'server_id')},
        ),
        migrations.AddIndex(
            model_name='retryattempt',
            index=models.Index(fields=['message', 'attempt_number'], name='sms_sender__message_7da0bf_idx'),
        ),
        migrations.AddIndex(
            model_name='retryattempt',
            index=models.Index(fields=['scheduled_retry_time'], name='sms_sender__schedul_4213b4_idx'),
        ),
        migrations.AddIndex(
            model_name='retryattempt',
            index=models.Index(fields=['completed', 'success'], name='sms_sender__complet_de6ea0_idx'),
        ),
        migrations.AddIndex(
            model_name='carrierperformancelog',
            index=models.Index(fields=['carrier'], name='sms_sender__carrier_054ab0_idx'),
        ),
        migrations.AddIndex(
            model_name='carrierperformancelog',
            index=models.Index(fields=['success_rate'], name='sms_sender__success_fa4521_idx'),
        ),
        migrations.AddIndex(
            model_name='carrierperformancelog',
            index=models.Index(fields=['proxy_server', 'smtp_server'], name='sms_sender__proxy_s_9e221c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='carrierperformancelog',
            unique_together={('carrier', 'proxy_server', 'smtp_server')},
        ),
        migrations.AddIndex(
            model_name='campaigntemplate',
            index=models.Index(fields=['user', 'category'], name='sms_sender__user_id_caaf5c_idx'),
        ),
        migrations.AddIndex(
            model_name='campaigntemplate',
            index=models.Index(fields=['is_public', 'category'], name='sms_sender__is_publ_afda2f_idx'),
        ),
        migrations.AddIndex(
            model_name='campaigntemplate',
            index=models.Index(fields=['-usage_count'], name='sms_sender__usage_c_2a31ae_idx'),
        ),
    ]

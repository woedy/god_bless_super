# Generated by Django 4.2.25 on 2025-10-08 20:59

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sms_sender', '0005_servercapacityweight_routingrule_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ABTestExperiment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Experiment name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Experiment description')),
                ('hypothesis', models.TextField(help_text="What we're testing and expected outcome")),
                ('test_type', models.CharField(choices=[('message_content', 'Message Content'), ('send_timing', 'Send Timing'), ('server_config', 'Server Configuration'), ('rate_limiting', 'Rate Limiting'), ('routing_rules', 'Routing Rules'), ('delivery_settings', 'Delivery Settings')], max_length=20)),
                ('traffic_split', models.FloatField(default=0.5, help_text='Percentage of traffic for variant A (0.0-1.0)')),
                ('minimum_sample_size', models.IntegerField(default=100, help_text='Minimum messages per variant')),
                ('confidence_level', models.FloatField(default=0.95, help_text='Statistical confidence level')),
                ('control_config', models.JSONField(default=dict, help_text='Control group configuration')),
                ('variant_config', models.JSONField(default=dict, help_text='Variant group configuration')),
                ('primary_metric', models.CharField(choices=[('delivery_rate', 'Delivery Rate'), ('response_time', 'Response Time'), ('success_rate', 'Success Rate'), ('cost_per_message', 'Cost Per Message'), ('error_rate', 'Error Rate')], default='delivery_rate', max_length=50)),
                ('secondary_metrics', models.JSONField(default=list, help_text='Additional metrics to track')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('running', 'Running'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('statistical_significance', models.FloatField(blank=True, help_text='P-value of the test', null=True)),
                ('confidence_interval', models.JSONField(blank=True, default=dict, help_text='Confidence interval for the effect')),
                ('effect_size', models.FloatField(blank=True, help_text='Measured effect size', null=True)),
                ('winner', models.CharField(blank=True, choices=[('control', 'Control'), ('variant', 'Variant'), ('inconclusive', 'Inconclusive')], max_length=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ab_experiments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ABTestVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Variant name (e.g., 'Control', 'Variant A')", max_length=100)),
                ('is_control', models.BooleanField(default=False, help_text='Whether this is the control group')),
                ('configuration', models.JSONField(default=dict, help_text='Variant-specific configuration')),
                ('traffic_allocation', models.FloatField(help_text='Percentage of traffic allocated to this variant')),
                ('total_messages', models.IntegerField(default=0)),
                ('successful_messages', models.IntegerField(default=0)),
                ('failed_messages', models.IntegerField(default=0)),
                ('average_response_time', models.FloatField(blank=True, null=True)),
                ('average_cost', models.FloatField(blank=True, null=True)),
                ('error_count', models.IntegerField(default=0)),
                ('delivery_rate', models.FloatField(blank=True, help_text='Calculated delivery rate percentage', null=True)),
                ('success_rate', models.FloatField(blank=True, help_text='Calculated success rate percentage', null=True)),
                ('error_rate', models.FloatField(blank=True, help_text='Calculated error rate percentage', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='sms_sender.abtestexperiment')),
            ],
        ),
        migrations.CreateModel(
            name='ABTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('control_mean', models.FloatField(blank=True, null=True)),
                ('variant_mean', models.FloatField(blank=True, null=True)),
                ('control_std', models.FloatField(blank=True, null=True)),
                ('variant_std', models.FloatField(blank=True, null=True)),
                ('t_statistic', models.FloatField(blank=True, null=True)),
                ('p_value', models.FloatField(blank=True, null=True)),
                ('degrees_of_freedom', models.IntegerField(blank=True, null=True)),
                ('effect_size', models.FloatField(blank=True, null=True)),
                ('confidence_interval_lower', models.FloatField(blank=True, null=True)),
                ('confidence_interval_upper', models.FloatField(blank=True, null=True)),
                ('minimum_detectable_effect', models.FloatField(blank=True, null=True)),
                ('practical_significance', models.BooleanField(blank=True, null=True)),
                ('recommendation', models.TextField(blank=True, help_text='Analysis and recommendations')),
                ('confidence_level', models.FloatField(help_text='Confidence level used in analysis')),
                ('analysis_method', models.CharField(choices=[('t_test', 'T-Test'), ('chi_square', 'Chi-Square'), ('mann_whitney', 'Mann-Whitney U'), ('bootstrap', 'Bootstrap')], default='t_test', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('experiment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='sms_sender.abtestexperiment')),
            ],
        ),
        migrations.CreateModel(
            name='ABTestAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
                ('assignment_method', models.CharField(choices=[('random', 'Random'), ('hash_based', 'Hash-based'), ('sequential', 'Sequential')], default='random', max_length=20)),
                ('result_recorded', models.BooleanField(default=False)),
                ('result_recorded_at', models.DateTimeField(blank=True, null=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='sms_sender.abtestexperiment')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ab_test_assignments', to='sms_sender.smsmessage')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='sms_sender.abtestvariant')),
            ],
        ),
        migrations.CreateModel(
            name='CampaignOptimizationRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Recommendation title', max_length=200)),
                ('description', models.TextField(help_text='Detailed recommendation description')),
                ('category', models.CharField(choices=[('server_config', 'Server Configuration'), ('routing_rules', 'Routing Rules'), ('timing', 'Send Timing'), ('rate_limiting', 'Rate Limiting'), ('message_content', 'Message Content'), ('general', 'General Optimization')], max_length=50)),
                ('expected_improvement', models.FloatField(help_text='Expected improvement percentage')),
                ('confidence_score', models.FloatField(help_text='Confidence in recommendation (0-1)')),
                ('implementation_effort', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=20)),
                ('configuration_changes', models.JSONField(default=dict, help_text='Specific configuration changes to make')),
                ('implementation_steps', models.JSONField(default=list, help_text='Step-by-step implementation guide')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('implemented', 'Implemented'), ('rejected', 'Rejected'), ('testing', 'Under Testing')], default='pending', max_length=20)),
                ('implemented_at', models.DateTimeField(blank=True, null=True)),
                ('actual_improvement', models.FloatField(blank=True, help_text='Actual improvement achieved', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('experiment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='sms_sender.abtestexperiment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='optimization_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-confidence_score', '-expected_improvement', '-created_at'],
                'indexes': [models.Index(fields=['user', 'status'], name='sms_sender__user_id_224536_idx'), models.Index(fields=['category', 'status'], name='sms_sender__categor_b62dd3_idx'), models.Index(fields=['-confidence_score'], name='sms_sender__confide_f12baf_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='abtestvariant',
            index=models.Index(fields=['experiment', 'is_control'], name='sms_sender__experim_a13828_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='abtestvariant',
            unique_together={('experiment', 'name')},
        ),
        migrations.AddIndex(
            model_name='abtestresult',
            index=models.Index(fields=['p_value'], name='sms_sender__p_value_d8318f_idx'),
        ),
        migrations.AddIndex(
            model_name='abtestresult',
            index=models.Index(fields=['effect_size'], name='sms_sender__effect__c9e9b6_idx'),
        ),
        migrations.AddIndex(
            model_name='abtestexperiment',
            index=models.Index(fields=['user', 'status'], name='sms_sender__user_id_973149_idx'),
        ),
        migrations.AddIndex(
            model_name='abtestexperiment',
            index=models.Index(fields=['test_type', 'status'], name='sms_sender__test_ty_28ca99_idx'),
        ),
        migrations.AddIndex(
            model_name='abtestexperiment',
            index=models.Index(fields=['-created_at'], name='sms_sender__created_cc48d9_idx'),
        ),
        migrations.AddIndex(
            model_name='abtestassignment',
            index=models.Index(fields=['experiment', 'variant'], name='sms_sender__experim_6d03be_idx'),
        ),
        migrations.AddIndex(
            model_name='abtestassignment',
            index=models.Index(fields=['message'], name='sms_sender__message_ab4147_idx'),
        ),
        migrations.AddIndex(
            model_name='abtestassignment',
            index=models.Index(fields=['assigned_at'], name='sms_sender__assigne_537f33_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='abtestassignment',
            unique_together={('experiment', 'message')},
        ),
    ]

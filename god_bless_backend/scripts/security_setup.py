#!/usr/bin/env python3
"""
Security setup script for God Bless platform deployment.
This script helps configure security settings for production deployment.
"""

import os
import sys
import secrets
import base64
import json
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Set Django settings module
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'god_bless_pro.settings')

import django
django.setup()

from django.conf import settings
from django.core.management import execute_from_command_line
from god_bless_pro.secrets_manager import secrets_manager


class SecuritySetup:
    """Security setup and configuration manager"""
    
    def __init__(self):
        self.domain = None
        self.environment = 'production'
        self.secrets = {}
    
    def run_setup(self, domain=None, environment='production'):
        """Run complete security setup"""
        self.domain = domain or input("Enter your domain name (e.g., yourdomain.com): ")
        self.environment = environment
        
        print(f"\nüîí Setting up security configuration for {self.domain}")
        print(f"Environment: {self.environment}")
        print("-" * 50)
        
        # Generate secrets
        self.generate_secrets()
        
        # Validate current configuration
        self.validate_configuration()
        
        # Generate configuration files
        self.generate_config_files()
        
        # Show security recommendations
        self.show_security_recommendations()
        
        print("\n‚úÖ Security setup completed!")
        print("Next steps:")
        print("1. Review generated configuration files")
        print("2. Update email settings with real values")
        print("3. Deploy to your server")
        print("4. Run security validation: python manage.py validate_secrets --audit")
    
    def generate_secrets(self):
        """Generate all required secrets"""
        print("\nüîë Generating secure secrets...")
        
        self.secrets = {
            # Core Django secrets
            'SECRET_KEY': self._generate_django_secret_key(),
            
            # Database secrets
            'POSTGRES_PASSWORD': self._generate_password(32),
            
            # Redis secrets
            'REDIS_PASSWORD': self._generate_password(24),
            
            # Admin secrets
            'DJANGO_SUPERUSER_PASSWORD': self._generate_password(16),
            'FLOWER_PASSWORD': self._generate_password(16),
            
            # Email (placeholder - user must update)
            'EMAIL_HOST_PASSWORD': 'your-email-app-password-change-this',
            
            # Encryption keys
            'FIELD_ENCRYPTION_KEY': self._generate_encryption_key(),
        }
        
        print(f"‚úì Generated {len(self.secrets)} secure secrets")
    
    def validate_configuration(self):
        """Validate current security configuration"""
        print("\nüîç Validating security configuration...")
        
        try:
            validation_results = secrets_manager.validate_environment()
            
            if validation_results['valid']:
                print("‚úì Configuration validation passed")
            else:
                print("‚ö† Configuration validation found issues:")
                for error in validation_results['errors']:
                    print(f"  - {error}")
                
                for warning in validation_results['warnings']:
                    print(f"  - {warning}")
        
        except Exception as e:
            print(f"‚ö† Validation error: {e}")
    
    def generate_config_files(self):
        """Generate configuration files"""
        print("\nüìù Generating configuration files...")
        
        # Generate .env.production
        self._generate_env_file()
        
        # Generate Coolify configuration
        self._generate_coolify_config()
        
        # Generate security checklist
        self._generate_security_checklist()
        
        print("‚úì Configuration files generated")
    
    def _generate_env_file(self):
        """Generate .env.production file"""
        env_content = f"""# =============================================================================
# PRODUCTION ENVIRONMENT CONFIGURATION
# Generated by security setup script
# Domain: {self.domain}
# Generated: {self._get_timestamp()}
# =============================================================================

# Environment
ENVIRONMENT=production
DEBUG=false
DJANGO_SETTINGS_MODULE=god_bless_pro.settings

# Django Configuration
SECRET_KEY={self.secrets['SECRET_KEY']}
ALLOWED_HOSTS=localhost,127.0.0.1,{self.domain},www.{self.domain}
CORS_ALLOWED_ORIGINS=https://{self.domain},https://www.{self.domain}
CSRF_TRUSTED_ORIGINS=https://{self.domain},https://www.{self.domain}

# Database Configuration
POSTGRES_DB=god_bless_db
POSTGRES_USER=god_bless_user
POSTGRES_PASSWORD={self.secrets['POSTGRES_PASSWORD']}
POSTGRES_HOST=database
POSTGRES_PORT=5432

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD={self.secrets['REDIS_PASSWORD']}

# Celery Configuration
CELERY_BROKER_URL=redis://:{self.secrets['REDIS_PASSWORD']}@redis:6379/0
CELERY_RESULT_BACKEND=redis://:{self.secrets['REDIS_PASSWORD']}@redis:6379/0

# Email Configuration (UPDATE THESE VALUES)
EMAIL_HOST=smtp.gmail.com
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD={self.secrets['EMAIL_HOST_PASSWORD']}
EMAIL_PORT=587
EMAIL_USE_TLS=True
DEFAULT_FROM_EMAIL=God Bless Platform <noreply@{self.domain}>

# Frontend Configuration
VITE_API_URL=https://{self.domain}/api
VITE_WS_URL=wss://{self.domain}/ws
VITE_APP_NAME=God Bless America Platform
VITE_VERSION=1.0.0
VITE_ENVIRONMENT=production

# Admin Configuration
DJANGO_SUPERUSER_USERNAME=admin
DJANGO_SUPERUSER_EMAIL=admin@{self.domain}
DJANGO_SUPERUSER_PASSWORD={self.secrets['DJANGO_SUPERUSER_PASSWORD']}

# Monitoring Configuration
FLOWER_USER=admin
FLOWER_PASSWORD={self.secrets['FLOWER_PASSWORD']}

# Security Configuration
SECURE_SSL_REDIRECT=True
SESSION_COOKIE_SECURE=True
CSRF_COOKIE_SECURE=True
USE_TLS=True

# Encryption
FIELD_ENCRYPTION_KEY={self.secrets['FIELD_ENCRYPTION_KEY']}

# Backup Configuration
BACKUP_ENABLED=true
BACKUP_RETENTION_DAYS=30

# =============================================================================
# IMPORTANT: Update the following values before deployment:
# - EMAIL_HOST_USER: Your actual email address
# - EMAIL_HOST_PASSWORD: Your email app password
# =============================================================================
"""
        
        with open('.env.production', 'w') as f:
            f.write(env_content)
        
        print("‚úì Generated .env.production")
    
    def _generate_coolify_config(self):
        """Generate Coolify configuration"""
        coolify_config = {
            "environment_variables": {
                "ENVIRONMENT": "production",
                "DEBUG": "false",
                "SECRET_KEY": self.secrets['SECRET_KEY'],
                "POSTGRES_PASSWORD": self.secrets['POSTGRES_PASSWORD'],
                "REDIS_PASSWORD": self.secrets['REDIS_PASSWORD'],
                "ALLOWED_HOSTS": f"localhost,127.0.0.1,{self.domain},www.{self.domain}",
                "CORS_ALLOWED_ORIGINS": f"https://{self.domain},https://www.{self.domain}",
                "CSRF_TRUSTED_ORIGINS": f"https://{self.domain},https://www.{self.domain}",
                "VITE_API_URL": f"https://{self.domain}/api",
                "VITE_WS_URL": f"wss://{self.domain}/ws",
            },
            "secrets": {
                "EMAIL_HOST_PASSWORD": self.secrets['EMAIL_HOST_PASSWORD'],
                "DJANGO_SUPERUSER_PASSWORD": self.secrets['DJANGO_SUPERUSER_PASSWORD'],
                "FLOWER_PASSWORD": self.secrets['FLOWER_PASSWORD'],
                "FIELD_ENCRYPTION_KEY": self.secrets['FIELD_ENCRYPTION_KEY'],
            }
        }
        
        with open('coolify-config.json', 'w') as f:
            json.dump(coolify_config, f, indent=2)
        
        print("‚úì Generated coolify-config.json")
    
    def _generate_security_checklist(self):
        """Generate security checklist"""
        checklist = f"""# Security Checklist for {self.domain}

## Pre-Deployment Security Checklist

### 1. Secrets Management
- [ ] All secrets are generated and stored securely
- [ ] Email password is updated with real app password
- [ ] Secrets are not committed to version control
- [ ] Different secrets are used for different environments

### 2. Domain Configuration
- [ ] Domain name is correctly configured: {self.domain}
- [ ] SSL certificate is configured
- [ ] HTTPS redirect is enabled
- [ ] HSTS headers are configured

### 3. Database Security
- [ ] Database password is strong (32+ characters)
- [ ] Database is not exposed to public internet
- [ ] Database backups are configured
- [ ] Database connection uses SSL

### 4. Network Security
- [ ] Only necessary ports are exposed (80, 443)
- [ ] Internal services use isolated networks
- [ ] Rate limiting is configured
- [ ] Firewall rules are properly configured

### 5. Application Security
- [ ] DEBUG is set to False
- [ ] Security headers are configured
- [ ] CORS origins are properly restricted
- [ ] CSRF protection is enabled
- [ ] Session security is configured

### 6. Monitoring and Logging
- [ ] Audit logging is enabled
- [ ] Security events are monitored
- [ ] Log retention is configured
- [ ] Alerting is set up for security events

### 7. User Security
- [ ] Strong password requirements are enforced
- [ ] Account lockout is configured
- [ ] Rate limiting is enabled for authentication
- [ ] Admin accounts use strong passwords

### 8. File Security
- [ ] File upload restrictions are configured
- [ ] Static files are served securely
- [ ] Media files have proper permissions
- [ ] Backup files are secured

## Post-Deployment Security Tasks

### 1. Immediate Tasks
- [ ] Change default admin password
- [ ] Test all authentication flows
- [ ] Verify SSL certificate installation
- [ ] Test security headers

### 2. Ongoing Security Tasks
- [ ] Regular security updates
- [ ] Monitor security logs
- [ ] Regular password rotation (every 90 days)
- [ ] Regular security audits
- [ ] Backup testing

## Security Contacts
- Security Team: security@{self.domain}
- Admin Contact: admin@{self.domain}

## Generated: {self._get_timestamp()}
"""
        
        with open('security-checklist.md', 'w') as f:
            f.write(checklist)
        
        print("‚úì Generated security-checklist.md")
    
    def show_security_recommendations(self):
        """Show security recommendations"""
        print("\nüõ°Ô∏è Security Recommendations:")
        print("1. Enable 2FA for all admin accounts")
        print("2. Regularly rotate secrets (every 90 days)")
        print("3. Monitor security logs daily")
        print("4. Keep all dependencies updated")
        print("5. Perform regular security audits")
        print("6. Use a Web Application Firewall (WAF)")
        print("7. Implement intrusion detection")
        print("8. Regular backup testing")
        print("9. Security awareness training for team")
        print("10. Incident response plan")
    
    def _generate_django_secret_key(self):
        """Generate Django secret key"""
        return base64.urlsafe_b64encode(secrets.token_bytes(64)).decode('utf-8')
    
    def _generate_password(self, length=32):
        """Generate secure password"""
        alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*"
        return ''.join(secrets.choice(alphabet) for _ in range(length))
    
    def _generate_encryption_key(self):
        """Generate encryption key"""
        return base64.urlsafe_b64encode(secrets.token_bytes(32)).decode('utf-8')
    
    def _get_timestamp(self):
        """Get current timestamp"""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")


def main():
    """Main function"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Security setup for God Bless platform')
    parser.add_argument('--domain', help='Domain name for deployment')
    parser.add_argument('--environment', default='production', help='Environment (default: production)')
    
    args = parser.parse_args()
    
    setup = SecuritySetup()
    setup.run_setup(domain=args.domain, environment=args.environment)


if __name__ == '__main__':
    main()
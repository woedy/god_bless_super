# Frontend build stage
FROM node:18-alpine as frontend-builder

WORKDIR /frontend

# Install dependencies including dev dependencies needed for build
COPY god_bless_platform/package*.json ./
RUN npm ci

# Copy source code
COPY god_bless_platform/ ./

# Set environment variables for production
# Using relative paths so they work with any domain
ENV NODE_ENV=production
ENV VITE_API_URL=/api
ENV VITE_WS_URL=/ws
ENV VITE_APP_NAME="God Bless Platform"
ENV VITE_VERSION=1.0.0
ENV VITE_ENVIRONMENT=production

# Build the frontend (skip TypeScript checking for production)
RUN npm ci && npm run build:prod

# Verify build output
RUN ls -la dist/ && test -f dist/index.html

# Backend + Frontend production image
FROM python:3.11-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    postgresql-client \
    redis-tools \
    gcc \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN useradd -r -u 1000 -m -d /app -s /bin/bash appuser

# Set working directory
WORKDIR /app

# Copy backend requirements and install
COPY god_bless_backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend code
COPY god_bless_backend/ ./

# Create directories first
RUN mkdir -p /app/static_cdn/static_root /app/static_cdn/static_files /app/media /app/logs /app/frontend_build

# Copy built frontend
COPY --from=frontend-builder /frontend/dist /app/frontend_build/

# CRITICAL: Set /app directory permissions so nginx (www-data) can traverse into it
RUN chmod 755 /app

# Set proper permissions for frontend files (nginx needs to read them)
RUN chmod -R 755 /app/frontend_build && \
    chown -R www-data:www-data /app/frontend_build

# Debug: Verify frontend copy and permissions
RUN echo "=== Frontend Copy Debug ===" && \
    ls -la /app/ && \
    ls -la /app/frontend_build/ && \
    test -f /app/frontend_build/index.html && \
    echo "Frontend index.html found!" && \
    echo "=== End Frontend Copy Debug ==="

# Copy nginx configuration
COPY nginx.prod.conf /etc/nginx/sites-available/default

# Copy startup script
COPY start-prod.sh /start-prod.sh
RUN chmod +x /start-prod.sh

# Collect static files
RUN python manage.py collectstatic --noinput --clear --settings=god_bless_pro.settings

# Verify static files were collected
RUN ls -la /app/static_cdn/static_root/ || echo "Static files directory empty"

# Set proper permissions for static files (nginx needs to read them)
RUN chmod -R 755 /app/static_cdn && \
    chown -R www-data:www-data /app/static_cdn

# Set ownership for media and logs
RUN chown -R appuser:appuser /app/media /app/logs && \
    find /app -maxdepth 1 -type f -exec chown appuser:appuser {} \;

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/api/health/ || exit 1

EXPOSE 80

CMD ["/start-prod.sh"]
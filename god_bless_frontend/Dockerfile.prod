# Multi-stage build for production
FROM node:18-alpine as builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./

# Install dependencies with production optimizations
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# Copy application code
COPY . .

# Build arguments for environment variables
ARG VITE_API_URL=http://localhost/api
ARG VITE_WS_URL=ws://localhost/ws
ARG VITE_APP_NAME="God Bless Frontend"
ARG VITE_VERSION=1.0.0
ARG VITE_ENVIRONMENT=production

# Set environment variables for build
ENV VITE_API_URL=$VITE_API_URL \
    VITE_WS_URL=$VITE_WS_URL \
    VITE_APP_NAME=$VITE_APP_NAME \
    VITE_VERSION=$VITE_VERSION \
    VITE_ENVIRONMENT=$VITE_ENVIRONMENT \
    NODE_ENV=production

# Build the application with optimizations
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    curl \
    wget \
    && rm -rf /var/cache/apk/*

# Create non-root user and group with security hardening
RUN addgroup -g 1000 -S appgroup && \
    adduser -u 1000 -S appuser -G appgroup -s /sbin/nologin && \
    # Lock the user account for security
    passwd -l appuser

# Create necessary directories with proper permissions and security
RUN mkdir -p /var/cache/nginx/client_temp \
             /var/cache/nginx/proxy_temp \
             /var/cache/nginx/fastcgi_temp \
             /var/cache/nginx/uwsgi_temp \
             /var/cache/nginx/scgi_temp \
             /var/log/nginx \
             /var/run \
             /tmp/nginx \
    && chown -R appuser:appgroup /var/cache/nginx \
    && chown -R appuser:appgroup /var/log/nginx \
    && chown -R appuser:appgroup /var/run \
    && chown -R appuser:appgroup /usr/share/nginx/html \
    && chown -R appuser:appgroup /tmp/nginx \
    # Set restrictive permissions
    && chmod 750 /var/cache/nginx /var/log/nginx /var/run /tmp/nginx \
    && chmod 755 /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built assets from builder stage with proper ownership
COPY --from=builder --chown=appuser:appgroup /app/dist /usr/share/nginx/html

# Create nginx.conf for non-root execution
RUN echo 'pid /var/run/nginx.pid;' > /etc/nginx/nginx.conf && \
    echo 'worker_processes auto;' >> /etc/nginx/nginx.conf && \
    echo 'error_log /var/log/nginx/error.log warn;' >> /etc/nginx/nginx.conf && \
    echo 'events { worker_connections 1024; }' >> /etc/nginx/nginx.conf && \
    echo 'http {' >> /etc/nginx/nginx.conf && \
    echo '    include /etc/nginx/mime.types;' >> /etc/nginx/nginx.conf && \
    echo '    default_type application/octet-stream;' >> /etc/nginx/nginx.conf && \
    echo '    sendfile on;' >> /etc/nginx/nginx.conf && \
    echo '    keepalive_timeout 65;' >> /etc/nginx/nginx.conf && \
    echo '    include /etc/nginx/conf.d/*.conf;' >> /etc/nginx/nginx.conf && \
    echo '}' >> /etc/nginx/nginx.conf

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Comprehensive health check
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Start nginx with non-root configuration
CMD ["nginx", "-g", "daemon off;"]
